const bankOne = [
  {letter: 'Q', id: 'Bass', src: 'http://www.denhaku.com/r_box/sr16/sr16bd/solid%20hl.wav'},
  {letter: 'W', id: 'Brass', src: 'http://cd.textfiles.com/swextrav8/swextrav8-7/wav/b24.wav'},
  {letter: 'E', id: 'Cello', src: 'http://www.cello.org/Sounds/Gstringarco.wav'},
  {letter: 'A', id: 'Chord', src: 'http://lapoc.de/samples/telshow-tele/cleanchord-D-01.wav'},
  {letter: 'S', id: 'Drumroll', src: 'http://cd.textfiles.com/swextrav8/swextrav8-7/wav/b9.wav'},
  {letter: 'D', id: 'Flute', src: 'http://www.kuni-net.com/oto72.wav'},
  {letter: 'Z', id: 'Guitar', src: 'http://lapoc.de/samples/telshow-tele/cleanchord-D-01.wav'},
  {letter: 'X', id: 'Harmonica', src: 'http://tipiwiki.free.fr/mus/HarmonicaSimple.wav'},
  {letter: 'C', id: 'Ochestra', src: 'http://www.bwass.org/bucket/HIT_3.wav'}
];

const bankTwo = [
  {letter: 'Q', id: 'Organ', src: 'http://thecyberbuddy.com/sounds/tvsoap.wav'},
  {letter: 'W', id: 'Piano', src: 'http://membrane.com/sound/piano.wav'},
  {letter: 'E', id: 'Recorder', src: 'http://www.soundjay.com/misc/sounds/whistle-flute-1.mp3'},
  {letter: 'A', id: 'Saxophone', src: 'http://www.innisdale.ca/ICS3U/sax.wav'},
  {letter: 'S', id: 'String', src: 'http://david.guerrero.free.fr/Effects/Twang2.wav'},
  {letter: 'D', id: 'Synthesizer', src: 'http://dnfw.org/hl/sound/kke/hollow.wav'},
  {letter: 'Z', id: 'Tom Tom', src: 'http://www.denhaku.com/r_box/linn/lotom.wav'},
  {letter: 'X', id: 'Triangle', src: 'http://tipiwiki.free.fr/snd/Triangle.wav'},
  {letter: 'C', id: 'Violin', src: 'http://s1download-universal-soundbank.com/wav/9888.wav'}
];

class DrumPad extends React.Component {
  constructor(props) {
    super(props);
    this.handleClick = this.handleClick.bind(this);
    this.handleKeyPress = this.handleKeyPress.bind(this);
  }
  
  componentDidMount() {
    document.addEventListener('keydown', this.handleKeyPress)
    window.focus()      // when website is first loaded, pressing keypad will work
  }
  componentWillUnmount() {
    document.removeEventListener('keydown', this.handleKeyPress)
  }
    
  // this handleKeyPress is for when using keyboard to press
  handleKeyPress(event) {
    if (event.keyCode === this.props.letter.charCodeAt()) {
/*    this.audio.play()
      this.audio.currentTime = 0
      this.props.handleDisplay(this.props.id) */
      this.handleClick();       // can just redirect to this.handleClick()
    }
  }
  
  // this handleClick is for when using mouse to click
  handleClick() {
    this.audio.play()
    this.audio.currentTime = 0
    this.props.handleDisplay(this.props.id)
  }
    
  render() {
    return (
      this.props.power ? 
      <div className="drum-pad" id={this.props.letter} onClick={this.handleClick}>
        <h3 className="poweron-buttonglow">{this.props.letter}</h3>
        <audio 
          src={this.props.src} 
          className="clip" 
          id={this.props.letter}
          ref={s => this.audio = s} // needed to connect the button div to the audio
          >
        </audio>
      </div> :

      <div className="drum-pad" id={this.props.letter} onClick={this.handleClick}>
        <h3 className="poweroff-buttonfade">{this.props.letter}</h3>
        <audio 
          src="#" 
          className="clip" 
          id={this.props.letter}
          ref={s => this.audio = s} // needed to connect the button div to the audio
          >
        </audio>
      </div>
    )
    
  }
}



class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      display: 'Press a Key',
      sliderVal: 50,
      power: true,
      bank: true,
      currentBank: bankOne
    }
    this.handleDisplay = this.handleDisplay.bind(this);
    this.adjustVolume = this.adjustVolume.bind(this);
    this.powerControl = this.powerControl.bind(this);
    this.selectBank = this.selectBank.bind(this);
  }
  
  powerControl() {
    this.setState({
      power: !this.state.power
    })
  }
  
  selectBank() {
    if (this.state.power) {
      this.state.currentBank === bankOne ?
        this.setState({
          currentBank: bankTwo,
          bank: !this.state.bank
        }) :
        this.setState({
          currentBank: bankOne,
          bank: !this.state.bank
        });
    }
  }
  
  handleDisplay(soundname) {
    if (this.state.power) {
      this.setState({
        display: soundname
      });
    }
  }
  
  adjustVolume(e) {
    if (this.state.power) {
      this.setState({
        sliderVal: e.target.value
      })
    }
  }
  
  
    
  render() {
    
    const powerSwitch = this.state.power ? {
      color: 'limegreen'
    } : {
      color: 'red'
    };
    
    const bankSwitch = this.state.bank ? {
      color: 'royalblue'
    } : {
      color: 'midnightblue'
    };
    
    const displayScreen = this.state.power ? {
      transition: 'color 500ms linear'
    } : {
      color: '#5f8c8e',
      backgroundColor: '#5f8c8e',
      backgroundImage: 'linear-gradient(to right, #5f8c8e, teal)',
      border: 'none',
      transition: 'color 1200ms linear',
    }
    
    const displayScreenBank = this.state.power ? {
      transition: 'color 500ms linear'
    } : {
      color: '#5f8c8e',
      backgroundColor: '#5f8c8e',
      backgroundImage: 'linear-gradient(to right, #2d8387, teal)',
      border: 'none',
      transition: 'color 1200ms linear',
    }
    const displayScreenPower = this.state.power ? {
      transition: 'color 500ms linear'
    } : {
      color: '#5f8c8e',
      backgroundColor: '#5f8c8e',
      backgroundImage: 'linear-gradient(to right, #5f8c8e, #2d8387)',
      border: 'none',
      transition: 'color 1200ms linear',
    }

    
    
    {
      const clips = [].slice.call(document.getElementsByClassName('clip'));
      clips.forEach(thesound => {
        thesound.volume = this.state.sliderVal / 100 // divide 100 becos .volume takes value of 0 to 1
      });
    }
    
    
    
    
    
    return (
      <div id="drum-machine">
        
        <div className="panel">
          <div id="display" style={displayScreen}>{this.state.display}</div>
          
          <div className="power-display" style={displayScreenPower}>{this.state.power === true ? 'Power On' : 'Power Off'}</div>
          
          <div className="bank-display" style={displayScreenBank}>{this.state.bank === true ? 'Bank 1' : 'Bank 2'}</div>
          
          <div className="volumedisplay" style={displayScreen}>Volume:&nbsp;<span id="demo">{this.state.sliderVal}</span></div>
            
          <div className="slidecontainer">  

            <input type="range" min="1" max="100" value={this.state.sliderVal} onChange={this.adjustVolume} className="slider" id="myRange"></input>
          </div>
     
          
          <div id="brand">JukeBox</div>
        </div>

        <div className="power" onClick={this.powerControl} style={powerSwitch}><span>Power <i class="fa fa-power-off"></i></span>
        </div>
        
        <div className="bankbutton" onClick={this.selectBank} style={bankSwitch}><span>Bank</span>
        </div>
        
        
        {this.state.currentBank === bankOne &&
        <div className='pad-bank'>
          {bankOne.map( d => (
            <DrumPad 
              power={this.state.power}  // needed for DrumPad this.props.power condition
              id={d.id} 
              src={d.src} 
              letter={d.letter} 
              handleDisplay={this.handleDisplay}
              />
          ))}
           
        </div>
        }
        {this.state.currentBank === bankTwo &&
        <div className='pad-bank'>
          {bankTwo.map( d => (
            <DrumPad 
              power={this.state.power}  // needed for DrumPad this.props.power condition
              id={d.id} 
              src={d.src} 
              letter={d.letter} 
              handleDisplay={this.handleDisplay}
              />
          ))}
           
        </div>
          
        }
      </div>
    );
  }
};

ReactDOM.render(<App />, document.getElementById("root"));